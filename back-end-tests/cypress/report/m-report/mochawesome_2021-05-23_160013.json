{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2021-05-23T14:00:07.422Z",
    "end": "2021-05-23T14:00:13.552Z",
    "duration": 6130,
    "testsRegistered": 9,
    "passPercent": 88.88888888888889,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f042c765-14db-4aa5-b344-41f3cd03acdb",
      "title": "",
      "fullFile": "cypress/integration/backend-test-suite.spec.js",
      "file": "cypress/integration/backend-test-suite.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "73a86ec4-c130-4f3c-8864-0683faabadcd",
          "title": "Test suite for the backend tests of Hotel site",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC01 - Retrieve rooms list",
              "fullTitle": "Test suite for the backend tests of Hotel site TC01 - Retrieve rooms list",
              "timedOut": null,
              "duration": 614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getRooms().then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).not.be.empty;\n});",
              "err": {},
              "uuid": "9493c53a-b1fd-43d8-a4b1-68d0e55d9577",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC02 - Create a new Room",
              "fullTitle": "Test suite for the backend tests of Hotel site TC02 - Create a new Room",
              "timedOut": null,
              "duration": 583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.createNewRoom(\"\", \"\", \"double\", 44441, 133, true, 440, [\"balcony\", \"ensuite\"]).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body));\n});\ncy.getRooms().then(response => {\n  expect(response.status).to.eq(200);\n  let lastID = response.body[response.body.length - 1].id;\n  var roomData = response.body[lastID - 1]; // assert that the new room is created correctly\n  expect(roomData.id).is.greaterThan(2);\n  expect(roomData.created).is.not.empty;\n  expect(roomData.category).to.eq(\"double\");\n  expect(roomData.floor).to.eq(44441);\n  expect(roomData.number).to.eq(133);\n  expect(roomData.available).to.be.true;\n  expect(roomData.price).to.eq(440);\n  expect(roomData.features).to.contain(\"balcony\", \"ensuite\");\n});",
              "err": {},
              "uuid": "35750d06-642b-425d-af7b-a3d2d8664ac0",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC03 - Edit last Room",
              "fullTitle": "Test suite for the backend tests of Hotel site TC03 - Edit last Room",
              "timedOut": null,
              "duration": 611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getRooms().then(response => {\n  expect(response.status).to.eq(200);\n}).then(response => {\n  let lastID = response.body[response.body.length - 1].id;\n  let created = response.body[lastID - 1].created;\n  cy.log(JSON.stringify(response.body));\n  cy.editRoom(lastID, created, \"double\", 5, 555, true, 1024, [\"ensuite\", \"sea_view\"]).then(response => {\n    expect(response.status).to.eq(200);\n    cy.log(JSON.stringify(response.body[2]));\n  });\n});\ncy.getRooms().then(response => {\n  expect(response.status).to.eq(200);\n  let lastID = response.body[response.body.length - 1].id;\n  var roomData = response.body[lastID - 1];\n  expect(roomData.floor).to.eq(5);\n  expect(roomData.number).to.eq(555);\n  expect(roomData.available).to.be.true;\n  expect(roomData.price).to.eq(1024);\n  expect(roomData.features).to.contain(\"ensuite\", \"sea_view\");\n});",
              "err": {},
              "uuid": "f88c94ad-a9f0-418c-b62e-14275909859b",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC04 - Delete last Room",
              "fullTitle": "Test suite for the backend tests of Hotel site TC04 - Delete last Room",
              "timedOut": null,
              "duration": 610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getRooms().then(response => {\n  expect(response.status).to.eq(200);\n}).then(response => {\n  let lastID = response.body[response.body.length - 1].id;\n  var roomID = response.body[lastID - 1].id;\n  cy.log(\"room id \" + roomID);\n  cy.deleteRoom(lastID).then(response => {\n    expect(response.status).to.eq(200);\n  });\n});\ncy.getRooms().then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body[response.body.length - 1].id).to.be.lessThan(3);\n});",
              "err": {},
              "uuid": "9d8f0c8a-f849-4a03-bbbd-b0d4d6a31ed5",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TCO5 - Create new client and delete",
              "fullTitle": "Test suite for the backend tests of Hotel site TCO5 - Create new client and delete",
              "timedOut": null,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get the clients list\ncy.getClients().then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body));\n}); //Create a client request\ncy.createNewClient(\"\", \"\", \"Herr Gurka\", \"green@giant.com\", \"2525 6677 3131\").then(response => {\n  expect(response.status).to.eq(200);\n}); // the check last created client\ncy.getClients().then(response => {\n  expect(response.status).to.eq(200);\n  let lastID = response.body[response.body.length - 1].id;\n  var clientData = response.body[lastID - 1];\n  expect(clientData.name).to.eq(\"Herr Gurka\");\n  expect(clientData.email).to.eq(\"green@giant.com\");\n  expect(clientData.telephone).to.eq(\"2525 6677 3131\");\n}).then(response => {\n  let lastID = response.body[response.body.length - 1].id;\n  cy.deleteClient(lastID).then(response => {\n    expect(response.status).to.eq(200);\n    cy.log(JSON.stringify(response.body));\n  }).then(response => {\n    cy.getClients().then(response => {\n      expect(response.status).to.eq(200);\n      cy.log(JSON.stringify(response.body));\n    });\n  });\n});",
              "err": {},
              "uuid": "859e841a-cbcc-4d3b-a716-a4aaaada9374",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TCO6 - Edit client",
              "fullTitle": "Test suite for the backend tests of Hotel site TCO6 - Edit client",
              "timedOut": null,
              "duration": 563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get the client ID 1\ncy.getClient(1).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body));\n});\ncy.editClient(1, \"2020-01-05T12:00:00.000Z\", \"Herr Gurka\", \"long@giant.com\", \"1111 2222 3333\").then(response => {\n  expect(response.status).to.eq(200);\n}); // Check the edited client (ID 1)\ncy.getClient(1).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.name).to.eq(\"Herr Gurka\");\n  expect(response.body.email).to.eq(\"long@giant.com\");\n  expect(response.body.telephone).to.eq(\"1111 2222 3333\");\n  cy.log(JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "ce64ca68-0278-4ca9-8dfc-e2c1c86ca1bf",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TCO7 - Create new bill and delete",
              "fullTitle": "Test suite for the backend tests of Hotel site TCO7 - Create new bill and delete",
              "timedOut": null,
              "duration": 622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get the bills list\ncy.getBills().then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body));\n}); //Create a bill request\ncy.createNewBill(\"\", \"\", 500, false).then(response => {\n  expect(response.status).to.eq(200);\n}); // the check last created bill\ncy.getBills().then(response => {\n  expect(response.status).to.eq(200);\n  let lastID = response.body[response.body.length - 1].id;\n  cy.log(lastID);\n  cy.getBill(lastID).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body.value).to.eq(500);\n    expect(response.body.paid).to.be.false;\n    cy.log(JSON.stringify(response.body));\n  }); //list of bills\n  cy.getBills().then(response => {\n    expect(response.status).to.eq(200);\n    cy.log(JSON.stringify(response.body));\n  }); // Delete the created bill\n  cy.deleteBill(lastID).then(response => {\n    expect(response.status).to.eq(200);\n    cy.log(JSON.stringify(response.body));\n  });\n}); // Get the bills list (to confirm the created client as been deleted)\ncy.getBills().then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "1ef57cdf-afa2-4e2d-a012-968528efd9cc",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TCO8 - edit a bill",
              "fullTitle": "Test suite for the backend tests of Hotel site TCO8 - edit a bill",
              "timedOut": null,
              "duration": 573,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Create a bill request\ncy.createNewBill(\"\", \"\", 10500, false).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body)); // the check last created bill\n  cy.getBills().then(response => {\n    expect(response.status).to.eq(200);\n    cy.log(JSON.stringify(response.body));\n    let lastID = response.body[response.body.length - 1].id;\n    cy.log(lastID); // edit the last bill\n    cy.editBill(lastID, \"2020-01-05T12:00:00.000Z\", 10500, true).then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.body.value).to.eq(10500);\n      expect(response.body.paid).to.be.true;\n      cy.log(JSON.stringify(response.body));\n    }); // check the last bill\n    cy.getBill(lastID).then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.body.value).to.eq(10500);\n      expect(response.body.paid).to.be.true;\n      cy.log(JSON.stringify(response.body));\n    });\n  });\n});",
              "err": {},
              "uuid": "eb940f2a-4403-44a5-8868-0c7500b9d95b",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TCO9 - Create, edit and delete a Reservation",
              "fullTitle": "Test suite for the backend tests of Hotel site TCO9 - Create, edit and delete a Reservation",
              "timedOut": null,
              "duration": 1069,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//Create a reservation request\ncy.createNewReservation(\"\", \"\", \"2021-05-12\", \"2021-06-04\", 1, 1, 1).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body)); // the check last created reservation\n  cy.getReservations().then(response => {\n    expect(response.status).to.eq(200);\n    cy.log(JSON.stringify(response.body));\n    let lastID = response.body[response.body.length - 1].id;\n    cy.log(lastID); // edit the last reservation\n    cy.editReservation(lastID, \"2020-01-05T12:00:00.000Z\", \"2021-05-25\", \"2021-06-30\", 1, 1, 1).then(response => {\n      expect(response.status).to.eq(200);\n      cy.log(JSON.stringify(response.body));\n    }); // check the last reservation\n    cy.getReservation(lastID).then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.body.created).to.eq(\"2020-01-05T12:00:00.000Z\");\n      expect(response.body.start).to.eq(\"2021-05-25\");\n      expect(response.body.end).to.eq(\"2021-06-31\");\n      expect(response.body.client).to.eq(1);\n      expect(response.body.room).to.eq(1);\n      expect(response.body.bill).to.eq(1);\n      cy.log(JSON.stringify(response.body));\n    }); // delete the last reservation\n    cy.deleteReservation(lastID).then(response => {\n      expect(response.status).to.eq(200);\n      cy.log(JSON.stringify(response.body));\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected '2021-06-30' to equal '2021-06-31'",
                "estack": "AssertionError: expected '2021-06-30' to equal '2021-06-31'\n    at Context.eval (http://localhost:57630/__cypress/tests?p=cypress\\integration\\backend-test-suite.spec.js:314:40)",
                "diff": "- '2021-06-30'\n+ '2021-06-31'\n"
              },
              "uuid": "7fb534eb-f5dd-419e-9321-3488d3191aaf",
              "parentUUID": "73a86ec4-c130-4f3c-8864-0683faabadcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9493c53a-b1fd-43d8-a4b1-68d0e55d9577",
            "35750d06-642b-425d-af7b-a3d2d8664ac0",
            "f88c94ad-a9f0-418c-b62e-14275909859b",
            "9d8f0c8a-f849-4a03-bbbd-b0d4d6a31ed5",
            "859e841a-cbcc-4d3b-a716-a4aaaada9374",
            "ce64ca68-0278-4ca9-8dfc-e2c1c86ca1bf",
            "1ef57cdf-afa2-4e2d-a012-968528efd9cc",
            "eb940f2a-4403-44a5-8868-0c7500b9d95b"
          ],
          "failures": [
            "7fb534eb-f5dd-419e-9321-3488d3191aaf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5843,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/m-report",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "yyyy/mm/dd_HHMMss"
      },
      "version": "5.2.0"
    }
  }
}